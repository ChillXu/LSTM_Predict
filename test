### 红黑树 vs 平衡二叉搜索树(AVL)?

+ 红黑树适用于大量插入和删除；因为它是非严格的平衡树；只要从根节点到叶子节点的最长路径不超过最短路径的2倍，就不用进行平衡调节；**适合插入修改密集型任务**。

+ AVL 树是严格的平衡树，从根节点到叶子节点的最短路径与最长路径的差不能超过 1；在进行大量插入和删除操作时，会频繁地进行平衡调整，严重降低效率；因为是更加严格的平衡，可以提供更快的查找速度，**适合读取查找密集型任务**。

+ 红黑树舍去了严格的平衡，使其插入，删除，查找的效率稳定在 **O(logn)**；而 AVL 树，查找没问题 **O(logn)**，但是为了保证高度平衡，动态插入和删除的代价也随之增加，综合效率肯定达不到 **O(logn)**。所以在进行大量插入，删除操作时，红黑树更优一些。



### b树 vs b+树

1. b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”，磁盘IO次数更少；
2. b+树查询必须查找到叶子节点，b树只要匹配到即可不用管元素位置，因此b+树查找更稳定（并不慢）；
3. 对于范围查找来说，b+树只需遍历叶子节点链表即可，b树却需要重复地中序遍历，如下两图：



### 为什么不用二叉树

从理论上讲，二叉树查找速度和比较次数都是最小的，为什么不用二叉树呢？
因为我们要考虑磁盘IO的影响，它相对于内存来说是很慢的。数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘页（对应索引树的节点）。所以我们要减少IO次数，对于树来说，IO次数就是树的高度，而“矮胖”就是b树的特征之一，它的每个节点最多包含m个孩子，m称为b树的阶，m的大小取决于磁盘页的大小。





[网络：TCP的滑动窗口与流量控制](https://blog.csdn.net/zhizhengguan/article/details/123821998)

### 为什么使用滑动窗口？

为了控制发送方发送速率，保证接收方来得及接收。避免不必要的数据来拥塞我们的链路。

+ TCP 每发送一个数据，都要进行一次确认应答。并且序列号是递增的。当上一个数据包收到应答， 再发送下一个。这样效率很低。（为每个数据包确认应答的缺点：数据包的**往返时间越长，通信的效率越低**。）

+ 为了解决这个问题，TCP引入了**窗口**这个概念。窗口大小就是指**无需等待确认应答，而可以继续发送数据的最大值**。（即使是在往返时间较长的情况下，它也不会降低网络通信的效率。）

- 相应的序列号应答，即使中间有丢失，收到最后的应答，也认为是成功接收所有数据了，这种模式就是**累计确认**或**累计应答**。

- 窗口实际上是操作系统开辟的缓存区域，发送方的叫发送窗口，接收方的叫接收窗口。发送窗口应该小于等于接收窗口。
- 发送方，依据发送窗口发送数据，接收方接收到数据，放在接收窗口中，此时接收窗口减小，接收方返回window字段，告诉发送方，接收窗口大小，发送窗口减小。两端的窗口不断变化，这个就是滑动窗口的机制。
- 滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。
- 当滑动窗口为 0 时，发送方一般不能再发送数据报。但有两种情况除外，一种情况是可以发送紧急数据，另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。



假设窗口大小为`3`的TCP段，那么发送方就可以[连续发送]`3`个TCP段，并且中途如果有`ACK`丢失，可以通过`下一个确认应答进行确认`。如下图

![在这里插入图片描述](https://img-blog.csdnimg.cn/0b8eaa832bae4414b78a5c2be7dae67e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2NlYW5TdGFy55qE5a2m5Lmg56yU6K6w,size_11,color_FFFFFF,t_70,g_se,x_16)

图中的ACK 600确认应答报文丢失，也没有关系，因为可以通过下一个确认应答进行确认，只要发送方收到了ACK 700确认应答，就意味着700之前的所有数据[接收方]都已经收到了。这个模式就叫做`累计确认`或者`累计应答`。



TCP报文的头部中有两个字段，一个是ACK确认号，一个是windows窗口值，在每次数据传递过程中，收发双方都会传递这两个字段，ACK表示对方已经对小于ACK-1的报文进行确认，发送方能够以此为动态调整窗口的左边界，windows窗口表示接收方能够接收的数据大小，发送方能够根据此动态调整窗口的右边界，这就形成了窗口的向前滑动，所以就叫做滑动窗口。



### 为什么要流量控制？

- **流量控制可以控制发送方的发送速度，使得接收方来得及接收**。
- **流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面**。



### 如何实现流量控制

由滑动窗口协议（连续ARQ协议）实现。滑动窗口协议既保证了分组无差错，有序接收，也实现了流量控制。主要方式就是计数法返回的ACK中包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。

Automatic Repeat reQuest



### 流量控制引发的死锁？怎么避免死锁的发生？

- 当发送者收到了一个窗口为0的应答，发送者便停止发送，等待接收者的下一个应答。但是如果这个窗口不为0的应答在传输过程丢失，发送者一直等待下去，而接收者以为发送者已经收到该应答，等待接收新数据，这样双方就相互等待，从而产生死锁。
- 为了避免流量控制引发的死锁，TCP使用了持续计时器。每当发送者收到一个零窗口的应答后就启动该计时器。时间一到便主动发送报文询问接收者的窗口大小。若接收者仍然返回零窗口，则重置该计时器继续等待；若窗口不为0，则表示应答报文丢失了，此时重置发送窗口后开始发送，这样就避免了死锁的产生。



### LRU vs LFU

LRU算法基于一种假设：长期不被使用的数据，在未来被用到的几率也不大。

**LRU算法适合：较大的文件比如游戏客户端（最近加载的地图文件）。**

**LFU算法适合：较小的文件和零碎的文件比如系统文件、应用程序文件。**

LRU消耗CPU资源较少，LFU消耗CPU资源较多。


[字节跳动｜后端｜提前批｜一面+二面+三面+HR 面 - 力扣（LeetCode）](https://leetcode.cn/circle/discuss/MDq50z/)
