### override & final 关键字

##### 1. override

当在父类中使用了虚函数时候，需要在某个子类中对这个虚函数进行重写。

```C++
class A {
    virtual void foo();
}
class B : public A {
    void foo(); //OK
    virtual void foo(); // OK
    void foo() override; //OK
}
```

override的作用：指定子类的某个虚函数是重写的父类的，如果函数名字不小心打错了的话，编译器是不会编译通过的。

```c++
class A {
    virtual void foo();
};
class B : public A {
    virtual void f00(); //OK，这个函数是B新增的，不是继承的
    virtual void f0o() override; //Error, 加了override之后，这个函数一定是继承自A的，A找不到就报错
};
```



##### 2. final

当不希望某个类被继承，或不希望某个虚函数被重写，可以在类名和虚函数后添加final关键字，添加final关键字后被继承或重写，编译器会报错。

```c++
class Base {
    virtual void foo();
};
 
class A : public Base {
    void foo() final; // foo 被override并且是最后一个override，在其子类中不可以重写
};

class B final : A {// 指明B是不可以被继承的
    void foo() override; // Error: 在A中已经被final了
};
 
class C : B {// Error: B is final
};
```





### move

### 列表初始化和初始化哪个先
